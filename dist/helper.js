"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CONFIG_PATH = void 0;
exports.saveKey = saveKey;
exports.saveModel = saveModel;
exports.loadKey = loadKey;
exports.generatePDF = generatePDF;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const pdfkit_1 = __importDefault(require("pdfkit"));
const config_json_1 = __importDefault(require("./config.json"));
exports.CONFIG_PATH = path_1.default.join(__dirname, 'config.json');
function saveKey(newApiKey, service) {
    let newConfig = config_json_1.default;
    newConfig[service].apiKey = newApiKey;
    fs_1.default.writeFileSync(exports.CONFIG_PATH, JSON.stringify(newConfig, null, 2));
}
function saveModel(newModel, service) {
    let newConfig = config_json_1.default;
    newConfig[service].model = newModel;
    fs_1.default.writeFileSync(exports.CONFIG_PATH, JSON.stringify(newConfig, null, 2));
}
function loadKey(service) {
    const dataKey = config_json_1.default[service];
    return dataKey && dataKey.apiKey.length > 0 ? dataKey.apiKey : null;
}
function generatePDF(result, filePath) {
    return new Promise((resolve, reject) => {
        try {
            // Ensure the directory exists
            const dir = path_1.default.dirname(filePath);
            if (!fs_1.default.existsSync(dir)) {
                fs_1.default.mkdirSync(dir, { recursive: true }); // Create the directory if it doesn't exist
            }
            // Create a new PDF document with a margin
            const doc = new pdfkit_1.default({ margin: 50 });
            const output = fs_1.default.createWriteStream(filePath);
            // Handle stream errors to ensure proper rejection
            output.on('error', (err) => {
                console.error(`Stream Error: ${err.message}`);
                reject(false);
            });
            // Pipe the document to a writable stream
            doc.pipe(output);
            // Add the report title
            doc
                .fontSize(18)
                .fillColor('#333')
                .text('Solidity Code Analysis Report', { align: 'center' })
                .moveDown();
            // Section header: Analysis Results
            doc
                .fontSize(14)
                .fillColor('#000')
                .text('Analysis Results:', { underline: true })
                .moveDown(0.5);
            // Helper function to write each category
            const writeCategory = (title, color, issues) => {
                // Write the category title
                doc
                    .fontSize(16)
                    .fillColor(color)
                    .text(title, { underline: true })
                    .moveDown(0.5);
                // Write issues if any, otherwise display "No issues found."
                if (issues.length === 0) {
                    doc.fontSize(12).fillColor('#333').text('No issues found.', { indent: 20 });
                }
                else {
                    issues.forEach((issue, index) => {
                        // Issue description
                        doc
                            .fontSize(12)
                            .fillColor('#000')
                            .text(`Issue ${index + 1}: ${issue.issue}`, { indent: 20 })
                            .moveDown(0.5);
                        // Suggestion
                        doc
                            .fontSize(12)
                            .fillColor('#000')
                            .text(`Suggestion: ${issue.suggestion}`, { indent: 40 })
                            .moveDown(0.5);
                        // Code highlight
                        doc
                            .fontSize(10)
                            .fillColor('#555')
                            .font('Courier')
                            .text(`Code Highlight:\n${issue.code_highlight}`, { indent: 60, lineGap: 2 })
                            .font('Helvetica') // Reset to default font
                            .moveDown(1);
                    });
                }
                doc.moveDown(1);
            };
            // Write each severity category
            writeCategory('High Severity Issues', '#FF0000', result.high);
            writeCategory('Medium Severity Issues', '#FFA500', result.medium);
            writeCategory('Low Severity Issues', '#008000', result.low);
            // Add a footer note at the bottom of the last page
            const addFooter = () => {
                doc
                    .fontSize(10)
                    .fillColor('#888')
                    .text('Generated by Kritisi', { align: 'center' });
            };
            doc.on('pageAdded', addFooter); // Add footer to every new page
            addFooter(); // Add footer to the first page
            // Finalize the document and handle the stream finish
            doc.end();
            output.on('finish', () => resolve(true));
        }
        catch (error) {
            console.log({ error });
            reject(false);
        }
    });
}
